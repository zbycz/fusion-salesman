<!DOCTYPE html>
<html>
<head>
<meta name="viewport" content="initial-scale=1.0, user-scalable=no">
<meta charset="utf-8">
<title>Fusion salesman</title>
<script src="https://maps.googleapis.com/maps/api/js?v=3.exp"></script>
<script src="http://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js"></script>
<!-- <link rel="stylesheet" href="http://ajax.googleapis.com/ajax/libs/jqueryui/1.11.1/themes/smoothness/jquery-ui.css"/> -->
<script src="http://ajax.googleapis.com/ajax/libs/jqueryui/1.11.1/jquery-ui.min.js"></script>
<script src="config.js"></script>
<script>
// Travelling salesman for Google Fusion Tables
// https://github.com/zbycz/fusion-salesman
//
// (c) 2014 [Pavel Zbytovský](http://zby.cz)
// Licenced under MIT license.
//

var map, layer;
var cache = {}; // cache for directions outputs between single [route] points. Key is string "$origin$destination"
var directionsService = new google.maps.DirectionsService();

// default Route to show
var route = [];
var defaultPoint = config.defaultPoint;
	defaultPoint.gmapsLatLng = new google.maps.LatLng(defaultPoint.gmapsLatLng[0], defaultPoint.gmapsLatLng[1]);
route.push(defaultPoint);
route.push(defaultPoint);

/** Init click listener and find first route.
 */
function initialize() {
	map = new google.maps.Map(document.getElementById('map-canvas'), {
		center: new google.maps.LatLng(config.center[0], config.center[1]),
		zoom: config.center[2]
	});

	// add layer with FusionTables points
	layer = new google.maps.FusionTablesLayer({
		query: config.fusionTablesQuery,
		suppressInfoWindows: true
	});
	layer.setMap(map);

	// click event on FusionTables point [typeof event == {latLng: U, pixelOffset: W, row: Object, infoWindowHtml: string}]
	google.maps.event.addListener(layer, 'click', function (event) {
		var row = event.row;
		row.gmapsLatLng = event.latLng;
		console.log('Clicked', row);

		if (route.length && route[route.length - 1] == defaultPoint)
			route.splice(route.length - 1, 0, row);
		else
			route.push(row);
		findAllRoutes();
	});

	// opaque FusionTables points on smaller zooms
	google.maps.event.addListener(map, 'zoom_changed', function () {
		console.log('zoom:' + map.getZoom());
		if (map.getZoom() >= 12)
			$('body').removeClass('opaque-zoom');
		else
			$('body').addClass('opaque-zoom');
	});

	findAllRoutes();
}

/** Iterates through all routes and calls getDirection() if cache missed
 */
function findAllRoutes() {
	//invalidate cache
	for (var key in cache) {
		cache[key].used = 0;
	}

	// find all routes
	var cur, prev = route[0];
	for (i = 1; i < route.length; i++) {
		cur = route[i];

		var obj = getDirections(prev.gmapsLatLng, cur.gmapsLatLng);
		obj.marker.setIcon(getIconUrl(i));

		prev = cur;
	}

	//hide&remove obsolete displayed items
	for (var key in cache) {
		if (cache[key].used == 0)
			hideAndRemoveCacheItem(key);
	}

	//write overview before requests + also when all requests are done
	writeOverview();
}

/** Main working function - calls google maps api
 */
function getDirections(origin, destination) {

	// look for a cache - then just use it
	var cacheKey = origin.toString() + destination.toString();
	if (cache[cacheKey]) {
		cache[cacheKey].used = 1;
		return cache[cacheKey];
	}

	// find new directions
	var obj = {
		used: 1,
		directionsDisplay: new google.maps.DirectionsRenderer({draggable: true, preserveViewport: true, suppressMarkers: true, map: map}),
		response: false,
		marker: new google.maps.Marker()
	};

	// on drag&drop route
	google.maps.event.addListener(obj.directionsDisplay, 'directions_changed', function () {
		writeOverview();
	});

	//send request
	var request = {
		origin: origin,
		destination: destination,
		travelMode: google.maps.TravelMode.DRIVING
	};

	directionsService.route(request, function (response, status) {
		if (status == google.maps.DirectionsStatus.OK) {
			obj.directionsDisplay.setDirections(response);
			obj.response = response;
			obj.marker.setPosition(response.routes[0].legs[0].start_location);
			obj.marker.setTitle(response.routes[0].legs[0].start_address);
			obj.marker.setMap(map);

			//when all requests are finished, write overview!
			var finished = true;
			for (var key in cache) if (!cache[key].response) finished = false;
			if (finished) writeOverview()
		}
	});

	cache[cacheKey] = obj;
	return obj;
}



/** Fill the right panel cards
 */
function writeOverview() {
	var ul = $('#places').empty();

	for (var i = 0; i < route.length; i++) {
		var row = route[i];
		ul.append(template({
			idx: i,
			iconUrl: getIconUrl(i + 1),
			row: row,
			getter: function(key){ //graceful getter
				return row[key] ? row[key].value : "";
			}
		}));

		// write route details
		if (i < route.length - 1) {
			var key = route[i].gmapsLatLng.toString() + route[i + 1].gmapsLatLng.toString();
			var rt = cache[key];

			ul.append('<li class="route">|- ' + getTotals(rt)
					+ (rt.response && rt.directionsDisplay.getDirections().routes[0].legs[0].via_waypoints.length ? ' <a href="#" data-cachekey="' + key + '">reset route between</a>' : '')
					+ '</li>');
		}
	}

	$('#places').sortable({
		items: '.card',
		placeholder: "ui-state-highlight",
		handle: ".handle",
		forceHelperSize: true,
		stop: function (event, ui) {
			var newOrder = $('#places').sortable('toArray', {attribute: 'data-index'});
			var newRoute = [];
			for (var i = 0; i < newOrder.length; i++) {
				newRoute.push(route[newOrder[i]]);
			}
			route = newRoute;
			findAllRoutes();
		}});


	$('#places a').click(function () {
		if (this.innerHTML.match(/×/))
			route.splice(this.parentNode.getAttribute('data-index'), 1);
		else
			hideAndRemoveCacheItem(this.getAttribute('data-cachekey'));
		findAllRoutes();
	});

	$('#total').html(getTotals('global'));
}

// -------------------------------------------------- Helpers --------------------------------------------------


/** Helper for 'remove button'
 */
function hideAndRemoveCacheItem(key) {
	if (cache[key]) {
		cache[key].directionsDisplay.setMap(null);
		cache[key].directionsDisplay = null;
		cache[key].marker.setMap(null);
		cache[key].marker = null;
		delete cache[key];
	}
}


/** The shortest templating system - eval everyting between <%= and %>
 */
function template(vars) {
	return config.cardHtmlTemplate.replace(/<\%=(.*?)\%>/gm, function(match, code){
		for(var k in vars) this[k] = vars[k];
		return eval(code);
	});
}

/** Helper for icon url (in template & in map)
 */
function getIconUrl(number) {
	return 'http://chart.apis.google.com/chart?chst=d_map_pin_letter&chld=' + number + '|FF0000|000000'; //FE6256|000000
	//text icon: 'http://chart.apis.google.com/chart?chst=d_map_spin&chld=1|0|FF0000|12|_|foo',
}

/** Returns distance+duration for route
 * @param Object|string oneRoute a cache-item for single || string 'global' for total sum
 * @return string ie. "195 km / 2:30h"
 */
function getTotals(oneRoute) {
	var total = 0;
	var duration = 0;
	var iterator = (oneRoute == 'global') ? cache : {1: oneRoute};

	for (var key in iterator) {
		var myroute = iterator[key].directionsDisplay.getDirections();
		if (!myroute)
			continue;

		myroute = myroute.routes[0];
		for (var i = 0; i < myroute.legs.length; i++) {
			total += myroute.legs[i].distance.value;
			duration += myroute.legs[i].duration.value;
		}
	}

	total = Math.round(total / 1000.0);
	duration = Math.round(duration / 60.0);
	var hours = Math.floor(duration / 60.0);
	var minutes = duration - hours * 60;
	if (minutes < 10) minutes = '0' + minutes;
	return total + ' km / ' + hours + ':' + minutes + 'h';
}


google.maps.event.addDomListener(window, 'load', initialize);

</script>
<style>
	html, body, #map-canvas {
		height: 100%;
		margin: 0px;
		padding: 0px;
		font-family: Roboto, Arial, sans-serif;
	}

	a {
		text-decoration: none;
		color: red;
		padding: 0 0.3em
	}

	.opaque-zoom img[src*='googleapis.com/mapslt'] {
		opacity: 0.4
	}

	ul {
		list-style-type: none
	}

	ul, ul li {
		padding: 0;
		margin: 0
	}

	.card {
		border: 1px silver solid;
		font-size: 80%;
		padding: 0.3em;
		background: #fff;
		position: relative;

	}

	.card b {
		font-size: 110%
	}

	.card .handle {
		position: absolute;
		right: 3px;
		top: 3px;
		width: 40px;
		height: 40px;
		cursor: move;
		background: no-repeat right top;
	}

	.card .handle:hover {
		background-color: rgba(255, 236, 19, 0.20)
	}

	.route {
		font-size: 80%;
		color: gray;
		padding-left: 3em
	}

	#map-canvas {
		width: 70%
	}

	#total {
		padding: 1em;
		font-size: 160%;
		text-align: center;
		background: #fbb450 url(logo.png) no-repeat right center
	}

	#right-panel {
		position: absolute;
		top: 0;
		right: 0;
		width: 30%;
		height: 100%;
		overflow: scroll
	}

	@media print {
		#map-canvas {
			display: none;
		}

		#right-panel {
			position: static;
			width: 70%;
			overflow: auto
		}
	}

</style>
</head>
<body class="opaque-zoom">
<div id="map-canvas"></div>
<div id="right-panel">
	<div id="total">&nbsp;</div>

	<div style="padding: 0.5em 1em 0 1em;">
		<ul id="places"></ul>

		<p>Click a point in the map to add to itinerary.</p>

		<p>Found ways betweeen points could be rerouted by dragging the route.</p>
	</div>

	<div id="directionsPanel" style="padding: 1em;"></div>
</div>
</body>
</html>
